@using ChatGPT.Shared.Models
@using Markdig;
@using ColorCode.Styling;
@inject IJSRuntime JS

<div class="conversation-area" @ref="ChatAreaRef">

    @foreach (var result in Conversation.ConversationHistory)
    {
        <div class="conversation-item @(result.User == "AI" ? "ai-reply" : "")">
            <div>
                @((MarkupString)@RenderHtmlContent(@result.Message))
            </div>
        </div>
    }
</div>


@code {

    [Parameter]
    public Conversation Conversation { get; set; } = default!;

    private ElementReference? ChatAreaRef { get; set; }

    private string RenderHtmlContent(string content) => Markdown.ToHtml(
        markdown: content,
        pipeline: new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseSyntaxHighlighting(StyleDictionary.DefaultDark)
            .Build()
        );


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        ScrollToEnd();
        return base.OnAfterRenderAsync(firstRender);
    }

    private void ScrollToEnd()
    {
        JS.InvokeVoidAsync("ChatGPTMethods.scrollToEnd", new object[] { ChatAreaRef });
    }

}